{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrids.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setState","onSubmit","e","preventDefault","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrids","loading","state","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,uBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OACtCJ,EAAS,KAIT,UACI,wCACA,uBACIK,KAAK,OAAOC,YAAY,2BACxBC,MAAOR,EACHS,SAhBI,SAACN,GACjBF,EAASE,EAAEO,OAAOF,UAgBd,2B,+BCxBCG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,sDAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXtB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,yCAAf,UACI,iCACI,qBAAKC,IAAKf,EAAKgB,IAAI,gBAEvB,4BAAIN,QCJHO,EAAW,SAAC,GAAe,IAAdnB,EAAa,EAAbA,SAGtB,ECLwB,SAAEA,GACzB,MAA0Bb,mBACtB,CACIoB,KAAM,GACNa,SAAS,IAHjB,mBAAOC,EAAP,KAAchC,EAAd,KAqBA,OAdAiC,qBAAW,WAERvB,EAASC,GACJuB,MAAM,SAAAC,GAEHnC,EAAS,CACLkB,KAAMiB,EACNJ,SAAS,SAKrB,CAACpB,IAEGqB,EDjBgBI,CAAazB,GAA9BO,EAAP,EAAOA,KAAMa,EAAb,EAAaA,QAKb,OACI,gCACI,6BAAKpB,IACJoB,GAAW,kDACZ,qBAAKJ,UAAU,YAAf,SAEQT,EAAKE,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEYtBe,EA7BM,WAIjB,MAAoCvC,mBAAS,CAAC,WAA9C,mBAAOwC,EAAP,KAAmBzC,EAAnB,KAOA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGIyC,EAAWlB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEQA,SAAWA,GADLA,UCnBlC4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.39166e42.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setState] = useState(\"\")\n\n    const handleInput = (e) => {\n        setState(e.target.value)\n    }\n\n    const handleSubmit = (e) => { \n        e.preventDefault();\n        setCategories(cats => [inputValue, ...cats])\n        setState(\"\"); \n    }\n     \n    return (\n        <form onSubmit={handleSubmit}>\n            <h2>Buscar</h2>\n            <input \n                type=\"text\" placeholder=\"Buscar Gifs animados....\"  \n                value={inputValue}\n                    onChange={handleInput} />\n            <br />\n             \n        </form> \n    ) \n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category )}&api_key=JC3j7ybaaioNCE6Scagbyce0tSwE2n0y`;\n    \n    const resp = await fetch(url);\n    const { data } = await resp.json();                       \n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n\n    return gifs; \n    \n}","import React from \"react\";\n\nexport const GifGridItem = ({id, title, url}) => {\n \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <figure>\n                <img src={url} alt=\"testeando\" />\n            </figure> \n            <p>{title}</p>\n        </div>\n    );\n}","\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrids = ({category}) =>{\n    \n    //const [images, setImages] = useState([]); \n    const {data, loading} = useFetchGifs(category);\n\n    //setImages(gifs)\n\n\n    return (\n        <div>\n            <h3>{category}</h3> \n            {loading && <p>Cargando datos...</p> }\n            <div className=\"card-grid\">\n                {\n                    data.map( img => (\n                        <GifGridItem\n                            key={img.id} \n                            {...img} />\n                        )   \n                    )\n                }\n            </div>\n                \n        </div>\n    )\n}","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n     const [state, setState] = useState(\n         {\n             data: [],\n             loading: true\n         }\n     );\n  \n     useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                \n                setState({\n                    data: imgs,\n                    loading: false\n                })    \n                \n            })\n\n     }, [category]);\n\n     return state;\n}\n","import React, {useState} from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrids } from \"./components/GifGrids\";\n\nconst GifExpertApp = () =>{\n\n    //const categories = ['dragon ball', 'superman', 'gatubela'];\n\n    const [categories, setCategories] = useState(['hunter']); \n    \n    // const handleAdd = (e) => { \n    //     //setCategories([...categories, 'Super campeones']) PRIMERA FORMA\n    //     setCategories( cats =>  [  ...categories, 'Super campeones']) //SEGUNDA FORMA\n    // } \n    \n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n            \n            { \n                categories.map((category) => (\n                    <GifGrids\n                            key={ category }\n                            category={ category }\n                        />\n                ))\n            }    \n        </>\n    ) \n}\n\nexport default GifExpertApp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';  \nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render( \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}